#########################
# Snakefile for testing #
# DropseqTools pipeline #
# and its functions     #
#########################

#############
# FUNCTIONS #
#############
def get_species_info(wildcards):
    species = config['samples'][wildcards.sample]['species']

    return {
        'annotation': config['knowledge']['annotations'][species],
        'genome': config['knowledge']['genomes'][species],
        'index': config['knowledge']['indices'][species]['star']
    }

def get_dge_extra_params(wildcards):
    # we do not create the dge-s here, so this wont be called
    pass

configfile: 'config.yaml'

#set samples
samples = config['samples'].keys()

# set variables
reads_root = 'reads'

reads_prefix = reads_root + '/{sample}'
reads_suffix = '.fastq.gz'

reads_mate_1 = reads_prefix + '/R1' + reads_suffix
reads_mate_2 = reads_prefix + '/R2' + reads_suffix
reads_pattern = reads_prefix + '/{mate}' + reads_suffix

dropseq_root = 'data/{sample}'

########################
# UNIQUE PIPELINE VARS #
########################
# set the tool script directories
picard_tools = '/data/rajewsky/shared_bins/picard-tools-2.21.6/picard.jar'
dropseq_tools = '/data/rajewsky/shared_bins/Drop-seq_tools-2.3.0'

dropseq_reports_dir = dropseq_root + '/reports'
dropseq_tmp_dir = dropseq_root + '/tmp'
smart_adapter = config['adapters']['smart']

# file containing R1 and R2 merged
dropseq_merge_in_mate_1 = reads_mate_1
dropseq_merge_in_mate_2 = reads_mate_2
dropseq_merged_reads = dropseq_root + '/unaligned.bam'

code_dir = 'code'
substitution_error_analysis_prefix = code_dir + '/analyse_bead_substitution'
substitution_error_analysis_code = substitution_error_analysis_prefix + '.Rmd'
substitution_error_analysis_pdf = substitution_error_analysis_prefix + '.pdf'

include: '../dropseq.smk'

rule all:
    input:
       expand(dropseq_top_barcodes, sample = samples),
       expand(substitution_error_analysis_pdf, sample = samples)

def get_raw_read_path(wildcards):
    return [config['samples'][wildcards.sample][wildcards.mate]]

rule link_raw_reads:
    input:
        unpack(get_raw_read_path) 
    output:
        reads_pattern
    params:
        reads_dir = reads_prefix
    shell:
        """
        mkdir -p {params.reads_dir}

        ln -s {input} {output}
        """

rule generate_bead_substitution_report:
    input:
        error_reports=expand(substitution_error_report, sample=samples),
        error_summaries=expand(substitution_error_summary, sample=samples)
    output:
        substitution_error_analysis_pdf 
    script:
        substitution_error_analysis_code
